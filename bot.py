from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import FSInputFile
from database import Database
from calendar_generator import calendar_gen
from keyboards import *
from datetime import datetime
import config
import logging
import asyncio
import os
import re
import pytz
from typing import Dict, List

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=config.BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
db = Database()


user_last_messages: Dict[int, List[int]] = {}


class CalendarStates(StatesGroup):
    SELECT_TIMEZONE = State()
    MAIN_MENU = State()
    SELECT_MODE = State()
    CALENDAR_VIEW = State()
    DAY_SELECTED = State()
    TASK_NAME_INPUT = State()
    TASK_TIME_SELECT = State()
    TASK_REMINDER_SELECT = State()
    EDIT_TASKS_MODE = State()
    TASK_EDIT_MODE = State()
    DAY_TASKS_VIEW = State()
    GROUP_MODE = State()
    CONFIRM_RESET = State()
    SETTINGS_MODE = State()
    TIMEZONE_INPUT = State()
    DELETE_DAY_MODE = State()
    CONFIRM_DELETE_DAY = State()

async def cleanup_user_messages(chat_id: int):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if chat_id in user_last_messages:
        failed_deletions = []
        
        for msg_id in user_last_messages[chat_id]:
            try:
                await bot.delete_message(chat_id, msg_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}: {e}")
                failed_deletions.append(msg_id)
        
        user_last_messages[chat_id] = failed_deletions
    else:
        user_last_messages[chat_id] = []

async def save_and_send(chat_id: int, **kwargs) -> types.Message:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∏ —É–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ"""
    await cleanup_user_messages(chat_id)
    message = await bot.send_message(chat_id, **kwargs)
    
    if chat_id not in user_last_messages:
        user_last_messages[chat_id] = []
    user_last_messages[chat_id].append(message.message_id)
    
    return message

async def save_and_send_photo(chat_id: int, **kwargs) -> types.Message:
    """–ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è —Ñ–æ—Ç–æ"""
    await cleanup_user_messages(chat_id)
    message = await bot.send_photo(chat_id, **kwargs)
    
    if chat_id not in user_last_messages:
        user_last_messages[chat_id] = []
    user_last_messages[chat_id].append(message.message_id)
    
    return message

async def send_main_menu(chat_id, user_id):
    await cleanup_user_messages(chat_id)
    user_mode = await db.get_user_mode(user_id)
    text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
    await save_and_send(
        chat_id, 
        text=text, 
        reply_markup=create_main_reply_keyboard(user_mode)
    )


@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name
    
    if not await db.user_exists(user_id):
        await db.add_user(user_id, username, full_name)
        await state.set_state(CalendarStates.SELECT_TIMEZONE)
        await save_and_send(
            message.chat.id,
            text="‚è∞ –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:",
            reply_markup=create_timezone_keyboard()
        )
    else:
        await state.set_state(CalendarStates.MAIN_MENU)
        await send_main_menu(message.chat.id, user_id)

@dp.callback_query(CalendarStates.SELECT_TIMEZONE)
async def process_timezone_selection(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    if data.startswith('tz_'):
        tz = data[3:]
        user_id = callback_query.from_user.id
        
        if tz == 'other':
            await state.set_state(CalendarStates.TIMEZONE_INPUT)
            await save_and_send(
                callback_query.message.chat.id,
                text="üåç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ü—Ä–∏–º–µ—Ä: Europe/Moscow, Asia/Tokyo"
            )
        else:
            await db.set_user_timezone(user_id, tz)
            await bot.answer_callback_query(callback_query.id, f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {tz}")
            await state.set_state(CalendarStates.SELECT_MODE)
            await save_and_send(
                callback_query.message.chat.id,
                text="üëã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:",
                reply_markup=create_mode_selection_keyboard()
            )
    else:
        await bot.answer_callback_query(callback_query.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞")

@dp.message(CalendarStates.TIMEZONE_INPUT)
async def process_custom_timezone(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    timezone = message.text.strip()
    
    try:
        pytz.timezone(timezone)
        await db.set_user_timezone(user_id, timezone)
        await state.set_state(CalendarStates.SELECT_MODE)
        await save_and_send(
            message.chat.id,
            text=f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {timezone}",
            reply_markup=create_mode_selection_keyboard()
        )
    except pytz.UnknownTimeZoneError:
        await save_and_send(
            message.chat.id,
            text="‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

@dp.callback_query(CalendarStates.SELECT_MODE)
async def process_mode_selection(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    mode = callback_query.data.split('_')[1]
    
    await db.set_user_mode(user_id, mode)
    await bot.answer_callback_query(callback_query.id, f"–†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {'–≤—Å—Ç—Ä–µ—á–∏' if mode == 'meeting' else 'to-do'}")
    
    await state.set_state(CalendarStates.MAIN_MENU)
    await send_main_menu(callback_query.message.chat.id, user_id)

@dp.message(CalendarStates.MAIN_MENU)
async def process_main_menu_message(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text
    
    if text == "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å":
        await show_calendar(message.chat.id, user_id)
        await state.set_state(CalendarStates.CALENDAR_VIEW)
    
    elif text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏":
        await state.set_state(CalendarStates.EDIT_TASKS_MODE)
        await show_calendar(message.chat.id, user_id, mode='edit')
    
    elif text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å":
        await state.set_state(CalendarStates.DELETE_DAY_MODE)
        await show_calendar(message.chat.id, user_id, mode='delete')
    
    elif text == "üë• –û–±—â–∏–µ –¥–Ω–∏":
        await state.set_state(CalendarStates.GROUP_MODE)
        await save_and_send(
            message.chat.id,
            text="üë• –í–≤–µ–¥–∏—Ç–µ @usernames –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–º–∞–∫—Å. 20):\n–ü—Ä–∏–º–µ—Ä: @user1 @user2",
            reply_markup=create_group_mode_keyboard()
        )
    
    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        user_mode = await db.get_user_mode(user_id)
        current_reminder = await db.get_user_reminder(user_id)
        timezone = await db.get_user_timezone(user_id)
        theme = await db.get_user_theme(user_id)
        
        text = (
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"‚Ä¢ –†–µ–∂–∏–º: {'–≤—Å—Ç—Ä–µ—á–∏' if user_mode == 'meeting' else 'to-do'}\n"
            f"‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞: {current_reminder} –º–∏–Ω\n"
            f"‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}\n"
            f"‚Ä¢ –¢–µ–º–∞: {theme}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await save_and_send(
            message.chat.id,
            text=text,
            reply_markup=create_settings_reply_keyboard()
        )
        await state.set_state(CalendarStates.SETTINGS_MODE)

async def show_calendar(chat_id, user_id, mode='normal'):
    current_date = datetime.now()
    year = current_date.year
    month = current_date.month
    theme = await db.get_user_theme(user_id)
    
    if mode == 'edit':
        calendar_data = await db.get_user_calendar(user_id, month, year)
        busy_days = {day: data for day, data in calendar_data.items() if data['status'] == 'busy' or data.get('task_count', 0) > 0}
        if not busy_days:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            builder = InlineKeyboardBuilder()
            builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_calendar")
            await save_and_send(
                chat_id,
                text="–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –Ω–µ—Ç –¥–Ω–µ–π —Å –∑–∞–¥–∞—á–∞–º–∏.",
                reply_markup=builder.as_markup()
            )
            return
    elif mode == 'delete':
        calendar_data = await db.get_user_calendar(user_id, month, year)
        busy_days = {day: data for day, data in calendar_data.items() if data['status'] == 'busy' or data.get('task_count', 0) > 0}
        if not busy_days:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            builder = InlineKeyboardBuilder()
            builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_calendar")
            await save_and_send(
                chat_id,
                text="–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –Ω–µ—Ç –¥–Ω–µ–π —Å –∑–∞–¥–∞—á–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                reply_markup=builder.as_markup()
            )
            return
    else:
        calendar_data = await db.get_user_calendar(user_id, month, year)
        busy_days = {day: data for day, data in calendar_data.items() if data['status'] == 'busy' or data.get('task_count', 0) > 0}
    
    calendar_img = calendar_gen.generate_calendar(year, month, busy_days=busy_days, theme=theme)
    
    photo = FSInputFile(calendar_img)
    await save_and_send_photo(
        chat_id=chat_id,
        photo=photo,
        reply_markup=create_calendar_keyboard(year, month, busy_days, mode),
        caption="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:"
    )
    os.remove(calendar_img)

@dp.callback_query(CalendarStates.CALENDAR_VIEW)
async def process_calendar_interaction(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    user_id = callback_query.from_user.id
    current_date = datetime.now()
    
    if data == 'reset_all':
        await state.set_state(CalendarStates.CONFIRM_RESET)
        await save_and_send(
            callback_query.message.chat.id,
            text="‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –í–ï–°–¨ –∫–∞–ª–µ–Ω–¥–∞—Ä—å?",
            reply_markup=create_confirmation_keyboard()
        )
        return
    
    elif data == 'edit_tasks':
        await show_calendar(callback_query.message.chat.id, user_id, mode='edit')
        await state.set_state(CalendarStates.EDIT_TASKS_MODE)
        return
    
    elif data == 'delete_day_mode':
        await show_calendar(callback_query.message.chat.id, user_id, mode='delete')
        await state.set_state(CalendarStates.DELETE_DAY_MODE)
        return
    
    elif data == 'done':
        await state.set_state(CalendarStates.MAIN_MENU)
        await send_main_menu(callback_query.message.chat.id, user_id)
        return
    
    if data.startswith('select_day_'):
        day = int(data.split('_')[2])
        user_mode = await db.get_user_mode(user_id)
        
        if user_mode == 'meeting':
            await db.mark_day_busy(user_id, current_date.year, current_date.month, day)
            await bot.answer_callback_query(callback_query.id, f"–î–µ–Ω—å {day} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–π")
            await show_calendar(callback_query.message.chat.id, user_id)
        else:
            await state.set_state(CalendarStates.TASK_NAME_INPUT)
            await state.update_data(day=day)
            await save_and_send(
                callback_query.message.chat.id,
                text=f"üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è {day} —á–∏—Å–ª–∞ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
                reply_markup=create_skip_button()
            )

@dp.callback_query(CalendarStates.DELETE_DAY_MODE)
async def process_delete_day(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    user_id = callback_query.from_user.id
    
    if data == 'back_to_calendar':
        await state.set_state(CalendarStates.CALENDAR_VIEW)
        await show_calendar(callback_query.message.chat.id, user_id)
        return
    
    if data.startswith('delete_day_'):
        day = int(data.split('_')[2])
        await state.update_data(day=day)
        await state.set_state(CalendarStates.CONFIRM_DELETE_DAY)
        await save_and_send(
            callback_query.message.chat.id,
            text=f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞–¥–∞—á–∏ –∏ –ø–æ–º–µ—Ç–∫–∏ –¥–ª—è {day} —á–∏—Å–ª–∞?",
            reply_markup=create_confirmation_keyboard()
        )

@dp.callback_query(CalendarStates.CONFIRM_DELETE_DAY)
async def process_confirm_delete_day(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    current_date = datetime.now()
    
    if callback_query.data == 'confirm_reset':
        data = await state.get_data()
        day = data['day']
        await db.mark_day_free(user_id, current_date.year, current_date.month, day)
        await bot.answer_callback_query(callback_query.id, f"‚úÖ –î–µ–Ω—å {day} –æ—á–∏—â–µ–Ω")
    else:
        await bot.answer_callback_query(callback_query.id, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    await state.set_state(CalendarStates.CALENDAR_VIEW)
    await show_calendar(callback_query.message.chat.id, user_id)

@dp.callback_query(CalendarStates.TASK_NAME_INPUT)
async def process_task_skip(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'skip_task':
        data = await state.get_data()
        day = data['day']
        user_id = callback_query.from_user.id
        current_date = datetime.now()
        
        await db.mark_day_busy(user_id, current_date.year, current_date.month, day)
        await bot.answer_callback_query(callback_query.id, f"–î–µ–Ω—å {day} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–π")
        await state.set_state(CalendarStates.CALENDAR_VIEW)
        await show_calendar(callback_query.message.chat.id, user_id)

@dp.message(CalendarStates.TASK_NAME_INPUT)
async def process_task_name(message: types.Message, state: FSMContext):
    task_name = message.text
    await state.update_data(task_name=task_name)
    await state.set_state(CalendarStates.TASK_TIME_SELECT)
    await save_and_send(
        message.chat.id,
        text="‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–¥–∞—á–∏:",
        reply_markup=create_time_selection_keyboard()
    )

@dp.callback_query(CalendarStates.TASK_TIME_SELECT)
async def process_task_time(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    
    if data.startswith('time_'):
        time_str = data.split('_')[1]
        await state.update_data(task_time=time_str)
        await state.set_state(CalendarStates.TASK_REMINDER_SELECT)
        await save_and_send(
            callback_query.message.chat.id,
            text="‚è± –ó–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –∑–∞–¥–∞—á–µ?",
            reply_markup=create_compact_reminder_keyboard()
        )
    
    elif data.startswith('time_page_'):
        page = int(data.split('_')[2])
        await bot.edit_message_reply_markup(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=create_time_selection_keyboard(page)
        )

@dp.callback_query(CalendarStates.TASK_REMINDER_SELECT)
async def process_task_reminder(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data.startswith('reminder_'):
        reminder = int(callback_query.data.split('_')[1])
        data = await state.get_data()
        user_id = callback_query.from_user.id
        current_date = datetime.now()
        
        await db.add_task(
            user_id,
            current_date.year,
            current_date.month,
            data['day'],
            data['task_name'],
            data['task_time'],
            reminder
        )
        
        await bot.answer_callback_query(callback_query.id, "‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        await save_and_send(
            callback_query.message.chat.id,
            text="–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∑–∞–¥–∞—á—É –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å?",
            reply_markup=create_task_decision_keyboard()
        )
        await state.set_state(CalendarStates.DAY_SELECTED)

@dp.callback_query(CalendarStates.DAY_SELECTED)
async def process_task_decision(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'add_another_task':
        await state.set_state(CalendarStates.TASK_NAME_INPUT)
        await save_and_send(
            callback_query.message.chat.id,
            text="üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É:"
        )
    else:  # back_to_calendar
        data = await state.get_data()
        user_id = callback_query.from_user.id
        await state.set_state(CalendarStates.CALENDAR_VIEW)
        await show_calendar(callback_query.message.chat.id, user_id)

@dp.callback_query(CalendarStates.EDIT_TASKS_MODE)
async def process_edit_tasks(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    user_id = callback_query.from_user.id
    
    if data == 'back_to_calendar':
        await state.set_state(CalendarStates.MAIN_MENU)
        await send_main_menu(callback_query.message.chat.id, user_id)
        return
    
    current_date = datetime.now()
    
    if data.startswith('edit_day_'):
        day = int(data.split('_')[2])
        tasks = await db.get_tasks_for_day(user_id, current_date.year, current_date.month, day)
        
        if not tasks:
            await bot.answer_callback_query(callback_query.id, "–í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç –∑–∞–¥–∞—á.")
            return
        
        await state.update_data(day=day)
        await state.set_state(CalendarStates.DAY_TASKS_VIEW)
        await show_day_tasks(callback_query.message.chat.id, day, tasks)

async def show_day_tasks(chat_id, day, tasks):
    text = f"–ó–∞–¥–∞—á–∏ –Ω–∞ {day} —á–∏—Å–ª–æ:\n"
    for idx, task in enumerate(tasks, 1):
        text += f"{idx}. {task['task']} ({task['time']})\n"
    
    await save_and_send(
        chat_id,
        text=text,
        reply_markup=create_tasks_list_keyboard(tasks)
    )

@dp.callback_query(CalendarStates.DAY_TASKS_VIEW)
async def process_task_actions(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    user_id = callback_query.from_user.id
    current_date = datetime.now()
    
    if data == 'back_to_days':
        await state.set_state(CalendarStates.EDIT_TASKS_MODE)
        await show_calendar(callback_query.message.chat.id, user_id, mode='edit')
        return
    
    if data.startswith('delete_task_'):
        task_id = int(data.split('_')[2])
        await db.delete_task(task_id)
        await bot.answer_callback_query(callback_query.id, "‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞")
        
        state_data = await state.get_data()
        day = state_data.get('day')
        tasks = await db.get_tasks_for_day(user_id, current_date.year, current_date.month, day)
        
        if tasks:
            await show_day_tasks(callback_query.message.chat.id, day, tasks)
        else:
            await save_and_send(callback_query.message.chat.id, text="–í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã")
            await state.set_state(CalendarStates.EDIT_TASKS_MODE)
            await show_calendar(callback_query.message.chat.id, user_id, mode='edit')
    
    elif data.startswith('edit_task_'):
        task_id = int(data.split('_')[2])
        task = await db.get_task_by_id(task_id)
        
        if task:
            await state.update_data(
                task_id=task_id,
                day=task['day']
            )
            await state.set_state(CalendarStates.TASK_NAME_INPUT)
            await save_and_send(
                callback_query.message.chat.id,
                text=f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è {task['day']} —á–∏—Å–ª–∞:"
            )

@dp.callback_query(CalendarStates.CONFIRM_RESET)
async def process_reset_confirmation(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    current_date = datetime.now()
    
    if callback_query.data == 'confirm_reset':
        await db.reset_user_calendar(user_id, current_date.year, current_date.month)
        await bot.answer_callback_query(callback_query.id, "‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–±—Ä–æ—à–µ–Ω")
    else:
        await bot.answer_callback_query(callback_query.id, "‚ùå –°–±—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω")
    
    await state.set_state(CalendarStates.MAIN_MENU)
    await send_main_menu(callback_query.message.chat.id, user_id)

@dp.message(CalendarStates.SETTINGS_MODE)
async def process_settings_message(message: types.Message, state: FSMContext):
    text = message.text
    user_id = message.from_user.id
    
    if text == "üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º":
        await state.set_state(CalendarStates.SELECT_MODE)
        await save_and_send(
            message.chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
            reply_markup=create_mode_selection_keyboard()
        )
    
    elif text == "‚è± –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        current_reminder = await db.get_user_reminder(user_id)
        await save_and_send(
            message.chat.id,
            text=f"‚è± –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {current_reminder} –º–∏–Ω\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=create_compact_reminder_keyboard()
        )
    
    elif text == "üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å":
        await state.set_state(CalendarStates.SELECT_TIMEZONE)
        await save_and_send(
            message.chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:",
            reply_markup=create_timezone_keyboard()
        )
    
    elif text == "üé® –¢–µ–º–∞":
        await save_and_send(
            message.chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:",
            reply_markup=create_theme_selection_keyboard()
        )
    
    elif text == "‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.set_state(CalendarStates.MAIN_MENU)
        await send_main_menu(message.chat.id, user_id)

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@dp.callback_query(CalendarStates.SETTINGS_MODE)
async def process_settings_callback(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    user_id = callback_query.from_user.id
    
    if data.startswith('theme_'):
        theme = data.split('_')[1]
        await db.set_user_theme(user_id, theme)
        await bot.answer_callback_query(callback_query.id, f"‚úÖ –¢–µ–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {theme}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        user_mode = await db.get_user_mode(user_id)
        current_reminder = await db.get_user_reminder(user_id)
        timezone = await db.get_user_timezone(user_id)
        theme = await db.get_user_theme(user_id)
        
        text = (
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"‚Ä¢ –†–µ–∂–∏–º: {'–≤—Å—Ç—Ä–µ—á–∏' if user_mode == 'meeting' else 'to-do'}\n"
            f"‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞: {current_reminder} –º–∏–Ω\n"
            f"‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}\n"
            f"‚Ä¢ –¢–µ–º–∞: {theme}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        try:
            await callback_query.message.edit_text(
                text=text,
                reply_markup=create_settings_reply_keyboard()
            )
        except:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await save_and_send(
                callback_query.message.chat.id,
                text=text,
                reply_markup=create_settings_reply_keyboard()
            )
    
    elif data.startswith('reminder_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        reminder = int(data.split('_')[1])
        await db.set_user_reminder(user_id, reminder)
        await bot.answer_callback_query(callback_query.id, f"‚è± –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {reminder} –º–∏–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        user_mode = await db.get_user_mode(user_id)
        current_reminder = reminder  # –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        timezone = await db.get_user_timezone(user_id)
        theme = await db.get_user_theme(user_id)
        
        text = (
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"‚Ä¢ –†–µ–∂–∏–º: {'–≤—Å—Ç—Ä–µ—á–∏' if user_mode == 'meeting' else 'to-do'}\n"
            f"‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞: {current_reminder} –º–∏–Ω\n"
            f"‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}\n"
            f"‚Ä¢ –¢–µ–º–∞: {theme}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        try:
            await callback_query.message.edit_text(
                text=text,
                reply_markup=create_settings_reply_keyboard()
            )
        except:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await save_and_send(
                callback_query.message.chat.id,
                text=text,
                reply_markup=create_settings_reply_keyboard()
            )

@dp.callback_query(CalendarStates.SETTINGS_MODE)
async def process_theme_selection(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data.startswith('theme_'):
        theme = callback_query.data.split('_')[1]
        user_id = callback_query.from_user.id
        await db.set_user_theme(user_id, theme)
        await bot.answer_callback_query(callback_query.id, f"‚úÖ –¢–µ–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {theme}")
        await state.set_state(CalendarStates.SETTINGS_MODE)
        await save_and_send(
            callback_query.message.chat.id,
            text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=create_settings_reply_keyboard()
        )

@dp.message(CalendarStates.GROUP_MODE)
async def process_group_usernames(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.strip()
    
    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await state.set_state(CalendarStates.MAIN_MENU)
        await send_main_menu(message.chat.id, user_id)
        return
    
    usernames = [username.strip() for username in text.split() if username.startswith('@')]
    
    if not usernames:
        builder = ReplyKeyboardBuilder()
        builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")
        builder.adjust(1)
        
        await save_and_send(
            message.chat.id,
            text="‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —é–∑–µ—Ä–Ω–µ–π–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n–ü—Ä–∏–º–µ—Ä: @user1 @user2",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )
        return
    
    if len(usernames) > 20:
        builder = ReplyKeyboardBuilder()
        builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")
        builder.adjust(1)
        
        await save_and_send(
            message.chat.id,
            text="‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (20).",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )
        return
    
    user_ids = await db.get_user_ids_by_usernames([u[1:] for u in usernames])
    
    if not user_ids:
        builder = ReplyKeyboardBuilder()
        builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")
        builder.adjust(1)
        
        await save_and_send(
            message.chat.id,
            text="‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —é–∑–µ—Ä–Ω–µ–π–º–∞–º.",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )
        return
    
    user_ids.append(user_id)
    current_date = datetime.now()
    free_days = await db.find_common_free_days(user_ids, current_date.year, current_date.month)
    
    if not free_days:
        builder = ReplyKeyboardBuilder()
        builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")
        builder.adjust(1)
        
        await save_and_send(
            message.chat.id,
            text="‚ùå –ù–µ—Ç –æ–±—â–∏—Ö —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–Ω–µ–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )
        return
    
    theme = await db.get_user_theme(user_id)
    calendar_img = calendar_gen.generate_calendar(
        current_date.year, 
        current_date.month, 
        common_free_days=free_days,
        theme=theme
    )
    
    photo = FSInputFile(calendar_img)
    sent_message = await bot.send_photo(
        chat_id=message.chat.id,
        photo=photo,
        caption=f"–û–±—â–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–Ω–∏: {', '.join(map(str, free_days))}",
        reply_markup=create_group_mode_keyboard()
    )
    os.remove(calendar_img)
    
    await state.set_state(CalendarStates.MAIN_MENU)
    await send_main_menu(message.chat.id, user_id)

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message(CalendarStates.CALENDAR_VIEW)
async def handle_calendar_view_message(message: types.Message):
    await save_and_send(message.chat.id, text="‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.")

@dp.message(CalendarStates.SELECT_MODE)
async def handle_mode_selection_message(message: types.Message):
    await save_and_send(message.chat.id, text="‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.")

@dp.message(CalendarStates.TASK_TIME_SELECT)
async def handle_time_selection_message(message: types.Message):
    await save_and_send(message.chat.id, text="‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.")

@dp.message(CalendarStates.TASK_REMINDER_SELECT)
async def handle_reminder_selection_message(message: types.Message):
    await save_and_send(message.chat.id, text="‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.")

@dp.message(CalendarStates.EDIT_TASKS_MODE)
async def handle_edit_tasks_message(message: types.Message):
    await save_and_send(message.chat.id, text="‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è —Å –∑–∞–¥–∞—á–∞–º–∏.")

@dp.message(CalendarStates.DAY_TASKS_VIEW)
async def handle_day_tasks_message(message: types.Message):
    await save_and_send(message.chat.id, text="‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.")

@dp.message(CalendarStates.CONFIRM_RESET)
async def handle_reset_confirmation_message(message: types.Message):
    await save_and_send(message.chat.id, text="‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å–±—Ä–æ—Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")

async def run_bot():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(run_bot())
